import os, json, datetime as dt, asyncio
from fastapi import FastAPI, Request, Response
from aiogram.types import Update
from .bot import DP, BOT
from .db import Session, execute, fetch_one
from .payments import tariff_to_delta
from .access import kick_and_unban

app = FastAPI()

# --- Telegram webhook endpoint ---
@app.post("/tg/webhook")
async def tg_webhook(req: Request):
    data = await req.json()
    update = Update.model_validate(data)
    await DP.feed_update(BOT, update)
    return Response(status_code=200)

# --- YooKassa webhook endpoint ---
@app.post("/yk/webhook")
async def yk_webhook(req: Request):
    data = await req.json()
    event = data.get("event")
    obj   = data.get("object", {})
    if event == "payment.succeeded":
        payment_id = obj.get("id")
        meta = obj.get("metadata") or {}
        user_id = int(meta.get("user_id"))
        tariff  = meta.get("tariff")
        delta = tariff_to_delta(tariff)
        async with Session() as s:
            # –ø–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç—ë–∂
            await execute(s, "update payments set succeeded=true, raw=:raw where id=:id",
                          raw=json.dumps(data), id=payment_id)
            if tariff == "lifetime":
                await execute(s, """
                  update users set status='active', lifetime=true, subscription_until=null
                  where user_id=:uid
                """, uid=user_id)
            else:
                await execute(s, """
                  update users set status='active',
                         subscription_until=coalesce(subscription_until, now()) + (:sec || ' seconds')::interval,
                         lifetime=false
                  where user_id=:uid
                """, uid=user_id, sec=int(delta.total_seconds()))
            await s.commit()
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await BOT.send_message(user_id,
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –æ—Ç–∫—Ä—ã—Ç. –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ /start.")
    return Response(status_code=200)

# --- Scheduler: trials & subscriptions ---
async def scheduler():
    while True:
        try:
            async with Session() as s:
                # –∏—Å—Ç—ë–∫ —Ç—Ä–∏–∞–ª -> —É–¥–∞–ª–∏—Ç—å –∏ —Å—Ç–∞—Ç—É—Å expired
                await execute(s, """
                  update users set status='expired'
                  where status='trial' and trial_until is not null and trial_until < now()
                """)
                # —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤—Å–µ—Ö —É –∫–æ–≥–æ expired –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                rows = await s.execute(
                    "select user_id from users where status='expired'"
                )
                for r in rows:
                    uid = r[0]
                    try:
                        await kick_and_unban(BOT, uid)
                        await BOT.send_message(uid,
                            "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à—ë–Ω. –•–æ—á–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è? –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ üëá")
                    except Exception:
                        pass
                # –∏—Å—Ç—ë–∫ –ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–µ lifetime)
                await execute(s, """
                  update users set status='expired'
                  where status='active' and lifetime=false and subscription_until < now()
                """)
                rows2 = await s.execute(
                    "select user_id from users where status='expired' and lifetime=false"
                )
                for r in rows2:
                    uid = r[0]
                    try:
                        await kick_and_unban(BOT, uid)
                        await BOT.send_message(uid,
                            "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø?")
                    except Exception:
                        pass
                await s.commit()
        except Exception:
            pass
        await asyncio.sleep(3600)  # —Ä–∞–∑ –≤ —á–∞—Å

@app.on_event("startup")
async def on_start():
    asyncio.create_task(scheduler())
