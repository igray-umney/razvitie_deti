"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å bot.py
"""

from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
import asyncio
import logging

# ============================================
# –¢–ê–ë–õ–ò–¶–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
# ============================================

def create_feedback_table(get_db_connection):
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                username TEXT,
                feedback_type TEXT NOT NULL,
                additional_text TEXT,
                promo_code TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        cur.close()
        conn.close()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ feedback —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã feedback: {e}")

# ============================================
# –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ============================================

def get_users_with_expired_subscription(get_db_connection):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞"""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute('''
            SELECT user_id, username 
            FROM users 
            WHERE subscription_until < %s 
            AND subscription_until IS NOT NULL
        ''', (datetime.now(),))
        
        users = cur.fetchall()
        cur.close()
        conn.close()
        
        return users
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

# ============================================
# –ö–õ–ê–í–ò–ê–¢–£–†–ê –ò –°–û–û–ë–©–ï–ù–ò–Ø
# ============================================

def get_feedback_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ", callback_data="fb_price")],
        [InlineKeyboardButton(text="üìö –ú–∞–ª–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="fb_content")],
        [InlineKeyboardButton(text="üó∫Ô∏è –ù–µ—É–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è", callback_data="fb_navigation")],
        [InlineKeyboardButton(text="‚è∞ –ù—É–∂–Ω–æ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å", callback_data="fb_time")],
        [InlineKeyboardButton(text="‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="fb_unclear")],
        [InlineKeyboardButton(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="fb_tech")],
        [InlineKeyboardButton(text="üí¨ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="fb_other")]
    ])
    return keyboard

FEEDBACK_MESSAGE = """
üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>

–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Ç—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω–∞—à –∫–ª—É–± <b>"–†–∞–∑–≤–∏—Ç–∏–µ –¥–ª—è –¥–µ—Ç–µ–π"</b>, –Ω–æ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.

üôè <b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!</b>

–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø–æ–º–µ—à–∞–ª–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!

–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –Ω–∏–∂–µ üëá

üéÅ <b>–ó–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 30%!</b>
"""

FEEDBACK_NAMES = {
    'price': 'üí∞ –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ',
    'content': 'üìö –ú–∞–ª–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    'navigation': 'üó∫Ô∏è –ù–µ—É–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
    'time': '‚è∞ –ù—É–∂–Ω–æ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å',
    'unclear': '‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è',
    'tech': 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
    'other': 'üí¨ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'
}

# ============================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# ============================================

def register_handlers(dp, bot, ADMIN_ID, get_db_connection):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.message(Command("send_feedback"))
    async def cmd_send_feedback_request(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        users = get_users_with_expired_subscription(get_db_connection)
        
        if not users:
            await message.answer("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π")
            return
        
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_fb_broadcast"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_fb_broadcast")
            ]
        ])
        
        await message.answer(
            f"üìä <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {len(users)}</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –Ω–∞ —Å–∫–∏–¥–∫—É 30%?",
            reply_markup=confirm_keyboard,
            parse_mode="HTML"
        )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.callback_query(F.data == "confirm_fb_broadcast")
    async def confirm_feedback_broadcast(callback: types.CallbackQuery):
        await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        users = get_users_with_expired_subscription(get_db_connection)
        success_count = 0
        error_count = 0
        
        keyboard = get_feedback_keyboard()
        
        for user in users:
            try:
                await bot.send_message(
                    chat_id=user['user_id'],
                    text=FEEDBACK_MESSAGE,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                success_count += 1
                await asyncio.sleep(0.1)
                
            except Exception as e:
                error_count += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        await callback.message.answer(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}",
            parse_mode="HTML"
        )
        
        await callback.answer()
    
    # –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.callback_query(F.data == "cancel_fb_broadcast")
    async def cancel_feedback_broadcast(callback: types.CallbackQuery):
        await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã
    @dp.callback_query(F.data.startswith("fb_"))
    async def handle_feedback_choice(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        username = callback.from_user.username or "–±–µ–∑ username"
        feedback_type = callback.data.replace('fb_', '')
        
        promo_code = f"SAVE30_{user_id}"
        
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute('''
                INSERT INTO feedback (user_id, username, feedback_type, promo_code, created_at)
                VALUES (%s, %s, %s, %s, %s)
            ''', (user_id, username, feedback_type, promo_code, datetime.now()))
            conn.commit()
            cur.close()
            conn.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è feedback: {e}")
        
        if ADMIN_ID:
            try:
                await bot.send_message(
                    ADMIN_ID,
                    f"üìä <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n"
                    f"üë§ @{username} (ID: {user_id})\n"
                    f"üí≠ {FEEDBACK_NAMES.get(feedback_type, feedback_type)}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="back")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="fb_write_more")]
        ])
        
        await callback.message.edit_text(
            f"üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!</b>\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {FEEDBACK_NAMES.get(feedback_type)}\n\n"
            f"üéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 30%:\n"
            f"<code>{promo_code}</code>\n\n"
            f"üí° –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 7 –¥–Ω–µ–π!\n"
            f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.\n\n"
            f"P.S. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ! üíö",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
    
    # –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ
    @dp.callback_query(F.data == "fb_write_more")
    async def write_more_feedback(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–∏—á–∏–Ω–µ.\n\n"
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
        )
        
        await state.set_state("waiting_detailed_feedback")
        await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
    @dp.message(StateFilter("waiting_detailed_feedback"))
    async def save_detailed_feedback(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        detailed_text = message.text
        
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute('''
                UPDATE feedback 
                SET additional_text = %s 
                WHERE user_id = %s 
                ORDER BY created_at DESC 
                LIMIT 1
            ''', (detailed_text, user_id))
            conn.commit()
            cur.close()
            conn.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞: {e}")
        
        if ADMIN_ID:
            try:
                await bot.send_message(
                    ADMIN_ID,
                    f"üí¨ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:</b>\n\n"
                    f"{detailed_text}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
            "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—ë —É—á—Ç—ë–º! üíö"
        )
        
        await state.clear()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @dp.message(Command("feedback_stats"))
    async def cmd_feedback_stats(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            cur.execute('''
                SELECT feedback_type, COUNT(*) as count 
                FROM feedback 
                GROUP BY feedback_type 
                ORDER BY count DESC
            ''')
            
            stats = cur.fetchall()
            
            cur.execute('SELECT COUNT(*) as total FROM feedback')
            total = cur.fetchone()['total']
            
            cur.close()
            conn.close()
            
            if total == 0:
                await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                return
            
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b>\n\n"
            
            for stat in stats:
                fb_type = stat['feedback_type']
                count = stat['count']
                percent = (count / total * 100) if total > 0 else 0
                name = FEEDBACK_NAMES.get(fb_type, fb_type)
                
                bar_length = int(percent / 5)
                bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
                
                text += f"{name}\n{bar} {count} ({percent:.1f}%)\n\n"
            
            text += f"<b>–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total}</b>"
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    @dp.message(Command("export_feedback"))
    async def cmd_export_feedback(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            cur.execute('''
                SELECT user_id, username, feedback_type, additional_text, promo_code, created_at 
                FROM feedback 
                ORDER BY created_at DESC
            ''')
            
            feedbacks = cur.fetchall()
            cur.close()
            conn.close()
            
            if not feedbacks:
                await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            import csv
            from io import StringIO
            
            output = StringIO()
            writer = csv.writer(output)
            writer.writerow(['User ID', 'Username', '–¢–∏–ø –æ—Ç–∑—ã–≤–∞', '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', '–ü—Ä–æ–º–æ–∫–æ–¥', '–î–∞—Ç–∞'])
            
            for fb in feedbacks:
                writer.writerow([
                    fb['user_id'],
                    fb['username'],
                    FEEDBACK_NAMES.get(fb['feedback_type'], fb['feedback_type']),
                    fb['additional_text'] or '-',
                    fb['promo_code'],
                    fb['created_at'].strftime('%Y-%m-%d %H:%M')
                ])
            
            output.seek(0)
            await message.answer_document(
                types.BufferedInputFile(
                    output.getvalue().encode('utf-8-sig'),
                    filename=f'feedback_{datetime.now().strftime("%Y%m%d")}.csv'
                ),
                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

# ============================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================

def init_feedback_system(dp, bot, ADMIN_ID, get_db_connection):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        create_feedback_table(get_db_connection)
        register_handlers(dp, bot, ADMIN_ID, get_db_connection)
        logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
