import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import sqlite3
import aiohttp
import uuid
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')  # –ù–∞–ø—Ä–∏–º–µ—Ä: @your_channel –∏–ª–∏ -1001234567890
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')  # 1119525
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))  # –¢–≤–æ–π Telegram ID

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    'trial': {'name': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', 'days': 2, 'price': 0},
    '1month': {'name': '1 –º–µ—Å—è—Ü (—Å–∫–∏–¥–∫–∞ 50%)', 'days': 30, 'price': 95},
    '3months': {'name': '3 –º–µ—Å—è—Ü–∞', 'days': 90, 'price': 490},
    '6months': {'name': '6 –º–µ—Å—è—Ü–µ–≤', 'days': 180, 'price': 890},
    'forever': {'name': '–ù–∞–≤—Å–µ–≥–¥–∞', 'days': 36500, 'price': 1990}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  username TEXT,
                  subscription_until TEXT,
                  tariff TEXT,
                  created_at TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (payment_id TEXT PRIMARY KEY,
                  user_id INTEGER,
                  amount REAL,
                  tariff TEXT,
                  status TEXT,
                  yookassa_id TEXT,
                  created_at TEXT)''')
    conn.commit()
    conn.close()

def add_user(user_id, username, days, tariff):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    subscription_until = (datetime.now() + timedelta(days=days)).isoformat()
    created_at = datetime.now().isoformat()
    
    c.execute('''INSERT OR REPLACE INTO users 
                 (user_id, username, subscription_until, tariff, created_at)
                 VALUES (?, ?, ?, ?, ?)''',
              (user_id, username, subscription_until, tariff, created_at))
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = c.fetchone()
    conn.close()
    return user

def is_subscription_active(user_id):
    user = get_user(user_id)
    if not user:
        return False
    subscription_until = datetime.fromisoformat(user[2])
    return datetime.now() < subscription_until

def create_payment(user_id, amount, tariff, yookassa_id):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    payment_id = f"{user_id}_{int(datetime.now().timestamp())}"
    created_at = datetime.now().isoformat()
    
    c.execute('''INSERT INTO payments 
                 (payment_id, user_id, amount, tariff, status, yookassa_id, created_at)
                 VALUES (?, ?, ?, ?, ?, ?, ?)''',
              (payment_id, user_id, amount, tariff, 'pending', yookassa_id, created_at))
    conn.commit()
    conn.close()
    return payment_id

def update_payment_status(yookassa_id, status):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    c.execute('UPDATE payments SET status = ? WHERE yookassa_id = ?', (status, yookassa_id))
    conn.commit()
    conn.close()

def get_payment_by_yookassa_id(yookassa_id):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    c.execute('SELECT * FROM payments WHERE yookassa_id = ?', (yookassa_id,))
    payment = c.fetchone()
    conn.close()
    return payment

# –ÆKassa API
async def create_yookassa_payment(amount, description, user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    url = "https://api.yookassa.ru/v3/payments"
    
    # –°–æ–∑–¥–∞–µ–º idempotence key –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    idempotence_key = str(uuid.uuid4())
    
    # –ë–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}"
    auth_bytes = auth_string.encode('utf-8')
    auth_b64 = base64.b64encode(auth_bytes).decode('utf-8')
    
    headers = {
        "Idempotence-Key": idempotence_key,
        "Content-Type": "application/json",
        "Authorization": f"Basic {auth_b64}"
    }
    
    data = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{(await bot.get_me()).username}"
        },
        "capture": True,
        "description": description,
        "metadata": {
            "user_id": str(user_id)
        }
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                return result
            else:
                logging.error(f"YooKassa error: {response.status}, {await response.text()}")
                return None

async def check_yookassa_payment(payment_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"
    
    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}"
    auth_bytes = auth_string.encode('utf-8')
    auth_b64 = base64.b64encode(auth_bytes).decode('utf-8')
    
    headers = {
        "Authorization": f"Basic {auth_b64}"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                return result
            else:
                logging.error(f"YooKassa check error: {response.status}")
                return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (2 –¥–Ω—è)", callback_data="trial")],
        [InlineKeyboardButton(text="üìÖ 1 –º–µ—Å—è—Ü - 95‚ÇΩ (—Å–∫–∏–¥–∫–∞ 50%)", callback_data="1month")],
        [InlineKeyboardButton(text="üìÖ 3 –º–µ—Å—è—Ü–∞ - 490‚ÇΩ", callback_data="3months")],
        [InlineKeyboardButton(text="üìÖ 6 –º–µ—Å—è—Ü–µ–≤ - 890‚ÇΩ", callback_data="6months")],
        [InlineKeyboardButton(text="‚ôæÔ∏è –ù–∞–≤—Å–µ–≥–¥–∞ - 1990‚ÇΩ", callback_data="forever")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π! 

üéÅ **–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ 2 –¥–Ω—è!**

–ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ:
‚Ä¢ 1 –º–µ—Å—è—Ü - 95‚ÇΩ (—Å–∫–∏–¥–∫–∞ 50%!)
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 490‚ÇΩ
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 890‚ÇΩ
‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ - 1990‚ÇΩ

–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá
"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu())

@dp.callback_query(F.data == "trial")
async def process_trial(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    user = get_user(user_id)
    if user:
        await callback.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–±–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    add_user(user_id, username, TARIFFS['trial']['days'], 'trial')
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        invite_link = await bot.create_chat_invite_link(
            CHANNEL_ID,
            member_limit=1,
            expire_date=datetime.now() + timedelta(days=2)
        )
        
        await callback.message.edit_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 2 –¥–Ω—è!\n\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {invite_link.invite_link}\n\n"
            f"‚è∞ –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è.\n"
            f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ!",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"Error adding user to channel: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
    
    await callback.answer()

@dp.callback_query(F.data.in_(['1month', '3months', '6months', 'forever']))
async def process_tariff(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tariff_code = callback.data
    tariff = TARIFFS[tariff_code]
    
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...", show_alert=False)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    payment = await create_yookassa_payment(
        amount=tariff['price'],
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞: {tariff['name']}",
        user_id=user_id
    )
    
    if not payment:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    payment_id = create_payment(user_id, tariff['price'], tariff_code, payment['id'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    confirmation_url = payment['confirmation']['confirmation_url']
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment['id']}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    await callback.message.edit_text(
        f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: **{tariff['name']}**\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']}‚ÇΩ\n\n"
        f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å'\n"
        f"2Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n"
        f"3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
        f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("check_"))
async def check_payment(callback: types.CallbackQuery):
    yookassa_payment_id = callback.data.replace("check_", "")
    
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...", show_alert=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
    payment_info = await check_yookassa_payment(yookassa_payment_id)
    
    if not payment_info:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    
    status = payment_info.get('status')
    
    if status == 'succeeded':
        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!
        payment = get_payment_by_yookassa_id(yookassa_payment_id)
        if payment:
            user_id = payment[1]
            tariff_code = payment[3]
            tariff = TARIFFS[tariff_code]
            username = callback.from_user.username or "unknown"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            update_payment_status(yookassa_payment_id, 'completed')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
            add_user(user_id, username, tariff['days'], tariff_code)
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç –≤ –∫–∞–Ω–∞–ª
                if tariff_code == 'forever':
                    # –î–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞ - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                    invite_link = await bot.create_chat_invite_link(
                        CHANNEL_ID,
                        member_limit=1
                    )
                else:
                    invite_link = await bot.create_chat_invite_link(
                        CHANNEL_ID,
                        member_limit=1,
                        expire_date=datetime.now() + timedelta(days=tariff['days'])
                    )
                
                await callback.message.edit_text(
                    f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø.\n"
                    f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n\n"
                    f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª: {invite_link.invite_link}",
                    reply_markup=get_main_menu(),
                    parse_mode="Markdown"
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                if ADMIN_ID:
                    await bot.send_message(
                        ADMIN_ID,
                        f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
                        f"üë§ User: @{username} (ID: {user_id})\n"
                        f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
                        f"üíµ –°—É–º–º–∞: {tariff['price']}‚ÇΩ"
                    )
                
            except Exception as e:
                logging.error(f"Error creating invite: {e}")
                await callback.message.edit_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=get_main_menu()
                )
        
    elif status == 'pending':
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            show_alert=True
        )
    elif status == 'waiting_for_capture':
        await callback.answer(
            "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã...",
            show_alert=True
        )
    else:
        await callback.answer(
            f"‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
            show_alert=True
        )

@dp.callback_query(F.data == "status")
async def check_status(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            show_alert=True
        )
        return
    
    subscription_until = datetime.fromisoformat(user[2])
    is_active = datetime.now() < subscription_until
    
    if is_active:
        days_left = (subscription_until - datetime.now()).days
        tariff_info = TARIFFS.get(user[3], {})
        
        if user[3] == 'forever':
            status_text = (
                f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!**\n\n"
                f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚ôæÔ∏è –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
            )
        else:
            status_text = (
                f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!**\n\n"
                f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                f"üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_until.strftime('%d.%m.%Y')}"
            )
    else:
        status_text = (
            f"‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º!"
        )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("stats"))
async def admin_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    
    c.execute('SELECT COUNT(*) FROM users')
    total_users = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM users WHERE subscription_until > ?', 
              (datetime.now().isoformat(),))
    active_users = c.fetchone()[0]
    
    c.execute('SELECT SUM(amount) FROM payments WHERE status = "completed"')
    total_revenue = c.fetchone()[0] or 0
    
    c.execute('SELECT COUNT(*) FROM payments WHERE status = "pending"')
    pending_payments = c.fetchone()[0]
    
    conn.close()
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue}‚ÇΩ
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {pending_payments}
"""
    
    await message.answer(stats_text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    logging.info("Bot started successfully!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
