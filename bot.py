import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import sqlite3
from hashlib import sha1
import hmac

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')  # –ù–∞–ø—Ä–∏–º–µ—Ä: @your_channel –∏–ª–∏ -1001234567890
YOOMONEY_WALLET = os.getenv('YOOMONEY_WALLET')
YOOMONEY_SECRET = os.getenv('YOOMONEY_SECRET')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))  # –¢–≤–æ–π Telegram ID

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    'trial': {'name': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', 'days': 2, 'price': 0},
    '1month': {'name': '1 –º–µ—Å—è—Ü (—Å–∫–∏–¥–∫–∞ 50%)', 'days': 30, 'price': 95},
    '3months': {'name': '3 –º–µ—Å—è—Ü–∞', 'days': 90, 'price': 490},
    '6months': {'name': '6 –º–µ—Å—è—Ü–µ–≤', 'days': 180, 'price': 890},
    'forever': {'name': '–ù–∞–≤—Å–µ–≥–¥–∞', 'days': 36500, 'price': 1990}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  username TEXT,
                  subscription_until TEXT,
                  tariff TEXT,
                  created_at TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (payment_id TEXT PRIMARY KEY,
                  user_id INTEGER,
                  amount REAL,
                  tariff TEXT,
                  status TEXT,
                  created_at TEXT)''')
    conn.commit()
    conn.close()

def add_user(user_id, username, days, tariff):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    subscription_until = (datetime.now() + timedelta(days=days)).isoformat()
    created_at = datetime.now().isoformat()
    
    c.execute('''INSERT OR REPLACE INTO users 
                 (user_id, username, subscription_until, tariff, created_at)
                 VALUES (?, ?, ?, ?, ?)''',
              (user_id, username, subscription_until, tariff, created_at))
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = c.fetchone()
    conn.close()
    return user

def is_subscription_active(user_id):
    user = get_user(user_id)
    if not user:
        return False
    subscription_until = datetime.fromisoformat(user[2])
    return datetime.now() < subscription_until

def create_payment(user_id, amount, tariff):
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    payment_id = f"{user_id}_{int(datetime.now().timestamp())}"
    created_at = datetime.now().isoformat()
    
    c.execute('''INSERT INTO payments 
                 (payment_id, user_id, amount, tariff, status, created_at)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (payment_id, user_id, amount, tariff, 'pending', created_at))
    conn.commit()
    conn.close()
    return payment_id

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (2 –¥–Ω—è)", callback_data="trial")],
        [InlineKeyboardButton(text="üìÖ 1 –º–µ—Å—è—Ü - 95‚ÇΩ (—Å–∫–∏–¥–∫–∞ 50%)", callback_data="1month")],
        [InlineKeyboardButton(text="üìÖ 3 –º–µ—Å—è—Ü–∞ - 490‚ÇΩ", callback_data="3months")],
        [InlineKeyboardButton(text="üìÖ 6 –º–µ—Å—è—Ü–µ–≤ - 890‚ÇΩ", callback_data="6months")],
        [InlineKeyboardButton(text="‚ôæÔ∏è –ù–∞–≤—Å–µ–≥–¥–∞ - 1990‚ÇΩ", callback_data="forever")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π! 

üéÅ **–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ 2 –¥–Ω—è!**

–ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ:
‚Ä¢ 1 –º–µ—Å—è—Ü - 95‚ÇΩ (—Å–∫–∏–¥–∫–∞ 50%!)
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 490‚ÇΩ
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 890‚ÇΩ
‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ - 1990‚ÇΩ

–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá
"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu())

@dp.callback_query(F.data == "trial")
async def process_trial(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    user = get_user(user_id)
    if user:
        await callback.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–±–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    add_user(user_id, username, TARIFFS['trial']['days'], 'trial')
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        invite_link = await bot.create_chat_invite_link(
            CHANNEL_ID,
            member_limit=1,
            expire_date=datetime.now() + timedelta(days=2)
        )
        
        await callback.message.edit_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 2 –¥–Ω—è!\n\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {invite_link.invite_link}\n\n"
            f"‚è∞ –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è.\n"
            f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ!",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"Error adding user to channel: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
    
    await callback.answer()

@dp.callback_query(F.data.in_(['1month', '3months', '6months', 'forever']))
async def process_tariff(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tariff_code = callback.data
    tariff = TARIFFS[tariff_code]
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_id = create_payment(user_id, tariff['price'], tariff_code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ÆMoney
    payment_url = (
        f"https://yoomoney.ru/quickpay/confirm?"
        f"receiver={YOOMONEY_WALLET}"
        f"&quickpay-form=shop"
        f"&targets=–ü–æ–¥–ø–∏—Å–∫–∞ {tariff['name']}"
        f"&paymentType=SB"
        f"&sum={tariff['price']}"
        f"&label={payment_id}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_{payment_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    await callback.message.edit_text(
        f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: **{tariff['name']}**\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']}‚ÇΩ\n\n"
        f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'\n"
        f"2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –ÆMoney\n"
        f"3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("check_"))
async def check_payment(callback: types.CallbackQuery):
    payment_id = callback.data.replace("check_", "")
    
    await callback.answer(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        show_alert=True
    )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ÆMoney API
    # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É
    await callback.message.edit_text(
        "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!\n\n"
        "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂...\n"
        "–î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ @admin",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "status")
async def check_status(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            show_alert=True
        )
        return
    
    subscription_until = datetime.fromisoformat(user[2])
    is_active = datetime.now() < subscription_until
    
    if is_active:
        days_left = (subscription_until - datetime.now()).days
        status_text = (
            f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!**\n\n"
            f"üìÖ –¢–∞—Ä–∏—Ñ: {TARIFFS.get(user[3], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
            f"üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_until.strftime('%d.%m.%Y')}"
        )
    else:
        status_text = (
            f"‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º!"
        )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("stats"))
async def admin_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    conn = sqlite3.connect('subscriptions.db')
    c = conn.cursor()
    
    c.execute('SELECT COUNT(*) FROM users')
    total_users = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM users WHERE subscription_until > ?', 
              (datetime.now().isoformat(),))
    active_users = c.fetchone()[0]
    
    c.execute('SELECT SUM(amount) FROM payments WHERE status = "completed"')
    total_revenue = c.fetchone()[0] or 0
    
    conn.close()
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue}‚ÇΩ
"""
    
    await message.answer(stats_text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
