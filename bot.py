import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import aiohttp
import uuid
import base64
import psycopg2
from psycopg2.extras import RealDictCursor

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
DATABASE_URL = os.getenv('DATABASE_URL')  # PostgreSQL URL –æ—Ç Railway

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    'trial': {'name': '7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ', 'days': 7, 'price': 0},
    '1month': {'name': '1 –º–µ—Å—è—Ü', 'days': 30, 'price': 99, 'old_price': 299},
    '3months': {'name': '3 –º–µ—Å—è—Ü–∞', 'days': 90, 'price': 249, 'old_price': 897},
    '6months': {'name': '6 –º–µ—Å—è—Ü–µ–≤', 'days': 180, 'price': 399, 'old_price': 1794},
    'forever': {'name': '–ù–∞–≤—Å–µ–≥–¥–∞', 'days': 36500, 'price': 599, 'old_price': 2990}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
import feedback_broadcast

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id BIGINT PRIMARY KEY,
                  username TEXT,
                  subscription_until TIMESTAMP,
                  tariff TEXT,
                  created_at TIMESTAMP)''')
    
    cur.execute('''CREATE TABLE IF NOT EXISTS payments
                 (payment_id TEXT PRIMARY KEY,
                  user_id BIGINT,
                  amount REAL,
                  tariff TEXT,
                  status TEXT,
                  yookassa_id TEXT,
                  created_at TIMESTAMP)''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('''CREATE TABLE IF NOT EXISTS notifications
                 (user_id BIGINT PRIMARY KEY,
                  last_notified TIMESTAMP)''')
    
    cur.execute('''CREATE TABLE IF NOT EXISTS funnel_messages
                 (id SERIAL PRIMARY KEY,
                  user_id BIGINT,
                  message_type TEXT,
                  sent_at TIMESTAMP,
                  UNIQUE(user_id, message_type))''')

    cur.execute('''CREATE TABLE IF NOT EXISTS welcome_messages
                 (user_id BIGINT PRIMARY KEY,
                  sent_at TIMESTAMP,
                  opened BOOLEAN DEFAULT FALSE)''')
    
    conn.commit()
    cur.close()
    conn.close()

def add_user(user_id, username, days, tariff):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cur = conn.cursor()
    subscription_until = datetime.now() + timedelta(days=days)
    created_at = datetime.now()
    
    cur.execute('''INSERT INTO users 
                 (user_id, username, subscription_until, tariff, created_at)
                 VALUES (%s, %s, %s, %s, %s)
                 ON CONFLICT (user_id) 
                 DO UPDATE SET subscription_until = %s, tariff = %s''',
              (user_id, username, subscription_until, tariff, created_at, 
               subscription_until, tariff))
    
    conn.commit()
    cur.close()
    conn.close()

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user

def is_subscription_active(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = get_user(user_id)
    if not user:
        return False
    return datetime.now() < user['subscription_until']

def create_payment(user_id, amount, tariff, yookassa_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    conn = get_db_connection()
    cur = conn.cursor()
    payment_id = f"{user_id}_{int(datetime.now().timestamp())}"
    created_at = datetime.now()
    
    cur.execute('''INSERT INTO payments 
                 (payment_id, user_id, amount, tariff, status, yookassa_id, created_at)
                 VALUES (%s, %s, %s, %s, %s, %s, %s)''',
              (payment_id, user_id, amount, tariff, 'pending', yookassa_id, created_at))
    
    conn.commit()
    cur.close()
    conn.close()
    return payment_id

def update_payment_status(yookassa_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('UPDATE payments SET status = %s WHERE yookassa_id = %s', 
                (status, yookassa_id))
    conn.commit()
    cur.close()
    conn.close()

def get_payment_by_yookassa_id(yookassa_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –Æ–ö–∞—Å—Å—ã"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM payments WHERE yookassa_id = %s', (yookassa_id,))
    payment = cur.fetchone()
    cur.close()
    conn.close()
    return payment

def get_expired_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''SELECT user_id, username FROM users 
                   WHERE subscription_until < %s''', (datetime.now(),))
    expired = cur.fetchall()
    cur.close()
    conn.close()
    return expired

def was_notified_recently(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''SELECT last_notified FROM notifications 
                   WHERE user_id = %s''', (user_id,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    
    if not result:
        return False
    
    last_notified = result['last_notified']
    time_diff = datetime.now() - last_notified
    return time_diff.total_seconds() < 86400  # 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥

def mark_as_notified(user_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''INSERT INTO notifications (user_id, last_notified)
                   VALUES (%s, %s)
                   ON CONFLICT (user_id)
                   DO UPDATE SET last_notified = %s''',
                (user_id, datetime.now(), datetime.now()))
    conn.commit()
    cur.close()
    conn.close()

def get_trial_users_for_funnel():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    cur.execute('''SELECT user_id, username, subscription_until, created_at 
                   FROM users 
                   WHERE tariff = %s 
                   AND subscription_until > %s''',
                ('trial', datetime.now()))
    
    trial_users = cur.fetchall()
    cur.close()
    conn.close()
    return trial_users

def get_expired_users_for_funnel():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ò–°–¢–ï–ö–®–ï–ô –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ expired_day3 –∏ expired_day5"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''SELECT user_id, username, subscription_until, created_at 
                   FROM users 
                   WHERE tariff = %s 
                   AND subscription_until < %s''',  # üëà –ò—â–µ–º —Ç–µ—Ö —É –∫–æ–≥–æ –ò–°–¢–ï–ö–õ–ê –ø–æ–¥–ø–∏—Å–∫–∞
                ('trial', datetime.now()))
    
    expired_users = cur.fetchall()
    cur.close()
    conn.close()
    return expired_users

def get_expired_trial_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''SELECT user_id, username, subscription_until, created_at 
                   FROM users 
                   WHERE tariff = %s 
                   AND subscription_until < %s''',
                ('trial', datetime.now()))
    
    expired_users = cur.fetchall()
    cur.close()
    conn.close()
    return expired_users

def get_funnel_message_sent(user_id, message_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''SELECT sent_at FROM funnel_messages 
                   WHERE user_id = %s AND message_type = %s''',
                (user_id, message_type))
    
    result = cur.fetchone()
    cur.close()
    conn.close()
    return result

def mark_funnel_message_sent(user_id, message_type):
    """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''INSERT INTO funnel_messages (user_id, message_type, sent_at)
                   VALUES (%s, %s, %s)
                   ON CONFLICT (user_id, message_type)
                   DO UPDATE SET sent_at = %s''',
                (user_id, message_type, datetime.now(), datetime.now()))
    
    conn.commit()
    cur.close()
    conn.close()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ü–ï–†–ï–î async def sales_funnel():
async def send_safe_funnel_message(user_id, text, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ—Ä–æ–Ω–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        await bot.send_message(user_id, text, reply_markup=reply_markup)
        return True
    except Exception as e:
        if "bot was blocked by the user" in str(e) or "Forbidden" in str(e):
            logging.info(f"User {user_id} blocked the bot, skipping")
            return False
        else:
            logging.error(f"Error sending message to {user_id}: {e}")
            return False

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–û–†–û–ù–ö–ê –î–õ–Ø 7-–î–ù–ï–í–ù–û–ì–û TRIAL –ü–ï–†–ò–û–î–ê
# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sales_funnel() –≤ bot.py (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∏ 240-496)

async def sales_funnel():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    logging.info("Sales funnel started!")
    
    while True:
        try:
            await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            trial_users = get_active_trial_users()
            
            for user in trial_users:
                user_id = user['user_id']
                created_at = user['created_at']
                subscription_until = user['subscription_until']
                
                # –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                hours_since_registration = (datetime.now() - created_at).total_seconds() / 3600
                # –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ trial
                hours_until_end = (subscription_until - datetime.now()).total_seconds() / 3600
                
                try:
                    # ========== –î–ï–ù–¨ 1 (20-28 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) ==========
                    if 20 <= hours_since_registration < 28:
                        if not get_funnel_message_sent(user_id, 'day1'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è", callback_data="survey_games")],
                                [InlineKeyboardButton(text="üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", callback_data="survey_creative")],
                                [InlineKeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ", callback_data="survey_learning")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
                                "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –£–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –Ω–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?\n\n"
                                "üí° –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä - —Ç–∞–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
                                "üéØ –£ –≤–∞—Å –µ—â–µ 6 –¥–Ω–µ–π —á—Ç–æ–±—ã:\n"
                                "‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                                "‚Ä¢ –£–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±–µ–Ω–∫–∞\n"
                                "‚Ä¢ –ü–æ–Ω—è—Ç—å —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ\n\n"
                                "‚ùì –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'day1')
                                logging.info(f"Sent day1 message to user {user_id}")
                    
                    # ========== –î–ï–ù–¨ 3 (68-76 —á–∞—Å–æ–≤) ==========
                    if 68 <= hours_since_registration < 76:
                        if not get_funnel_message_sent(user_id, 'day3'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìã –°–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")],
                                [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/razvitie_dety")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "–£–∂–µ 3 –¥–Ω—è –≤–º–µ—Å—Ç–µ! üéâ\n\n"
                                "–ù–∞–¥–µ–µ–º—Å—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è!\n\n"
                                "üìä –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n"
                                "–†–æ–¥–∏—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å –¥–µ—Ç—å–º–∏ –ø–æ –Ω–∞—à–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –≤—Å–µ–≥–æ 15-20 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å, "
                                "–∑–∞–º–µ—á–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!\n\n"
                                "‚ú® –û—Å—Ç–∞–ª–æ—Å—å 4 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n\n"
                                "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–±–Ω–∏–∫–æ–≤:\n"
                                "‚Ä¢ 1 –º–µ—Å—è—Ü - –≤—Å–µ–≥–æ 99‚ÇΩ (–≤–º–µ—Å—Ç–æ 299‚ÇΩ)\n"
                                "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 249‚ÇΩ (—Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π!)\n"
                                "‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ - 599‚ÇΩ (–æ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–æ–º)\n\n"
                                "üí° –°–æ–≤–µ—Ç: –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞—é—Ç —Ç–∞—Ä–∏—Ñ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - "
                                "–∫–∞–∫ —Ä–∞–∑ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å —Ä–∞–∑–≤–∏—Ç–∏—è!",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'day3')
                                logging.info(f"Sent day3 message to user {user_id}")
                    
                    # ========== –î–ï–ù–¨ 5 (116-124 —á–∞—Å–∞) ==========
                    if 116 <= hours_since_registration < 124:
                        if not get_funnel_message_sent(user_id, 'day5'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_tariffs")],
                                [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "üí¨ –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –¥—Ä—É–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏:\n\n"
                                "\"–î–æ—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –≤—ã—É—á–∏–ª–∞ 10 –±—É–∫–≤! –°–ø–∞—Å–∏–±–æ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!\" - –ê–Ω–Ω–∞\n\n"
                                "\"–°—ã–Ω —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è. –≠—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!\" - –û–ª–µ–≥\n\n"
                                "\"–õ—É—á—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–µ–±–µ–Ω–∫–∞!\" - –ï–ª–µ–Ω–∞\n\n"
                                "üìä –ù–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                                "‚Ä¢ 87% —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç –ø–æ–¥–ø–∏—Å–∫—É\n"
                                "‚Ä¢ 1000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö —Å–µ–º–µ–π\n"
                                "‚Ä¢ 5000+ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
                                "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!\n\n"
                                "üéÅ –£—Å–ø–µ–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π 50-70%\n\n"
                                "üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è: –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –≤–µ—Ä–Ω—ë–º –¥–µ–Ω—å–≥–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π!",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'day5')
                                logging.info(f"Sent day5 message to user {user_id}")
                    
                    # ========== –î–ï–ù–¨ 7 - –ó–ê 8 –ß–ê–°–û–í –î–û –ö–û–ù–¶–ê (160-164 —á–∞—Å–∞ –æ—Ç –Ω–∞—á–∞–ª–∞) ==========
                    if 8 <= hours_until_end < 12:
                        if not get_funnel_message_sent(user_id, 'day7_8hours'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üî• –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π", callback_data="show_tariffs")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 8 —á–∞—Å–æ–≤!\n\n"
                                "–ó–∞–≤—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∑–∞–∫—Ä–æ–µ—Ç—Å—è...\n\n"
                                "üéÅ –ù–æ —É –≤–∞—Å –µ—â–µ –µ—Å—Ç—å –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–æ –°–ö–ò–î–ö–û–ô:\n\n"
                                "üí∞ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–±–Ω–∏–∫–æ–≤):\n"
                                "1 –º–µ—Å—è—Ü: 299‚ÇΩ ‚Üí 99‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 200‚ÇΩ)\n"
                                "3 –º–µ—Å—è—Ü–∞: 897‚ÇΩ ‚Üí 249‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 648‚ÇΩ!) üî•\n"
                                "6 –º–µ—Å—è—Ü–µ–≤: 1794‚ÇΩ ‚Üí 399‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 1395‚ÇΩ)\n"
                                "–ù–∞–≤—Å–µ–≥–¥–∞: 2990‚ÇΩ ‚Üí 599‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 2391‚ÇΩ!)\n\n"
                                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —ç—Ç–∏ —Ü–µ–Ω—ã –∏—Å—á–µ–∑–Ω—É—Ç!\n\n"
                                "P.S. –ù–µ —Ç–µ—Ä—è–π—Ç–µ —Ç–æ, —á—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º üíö",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'day7_8hours')
                                logging.info(f"Sent day7_8hours message to user {user_id}")
                    
                    # ========== –î–ï–ù–¨ 7 - –ó–ê 2 –ß–ê–°–ê –î–û –ö–û–ù–¶–ê (166-170 —á–∞—Å–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞) ==========
                    if 1 <= hours_until_end < 3:
                        if not get_funnel_message_sent(user_id, 'day7_2hours'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ–π—á–∞—Å!", callback_data="show_tariffs")],
                                [InlineKeyboardButton(text="üí¨ –í–æ–ø—Ä–æ—Å—ã", url="https://t.me/razvitie_dety")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "üö® –ü–û–°–õ–ï–î–ù–ò–ï 2 –ß–ê–°–ê!\n\n"
                                "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –∑–∞–≤—Ç—Ä–∞ –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–ø—Ä–æ—Å–∏—Ç:\n"
                                "\"–ú–∞–º–∞/–ü–∞–ø–∞, –∞ –≥–¥–µ –Ω–∞—à–∏ –∏–≥—Ä—ã?\"\n\n"
                                "üéâ –ò–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–º–µ—Å—Ç–µ:\n"
                                "‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Ä–µ—á—å —á–µ—Ä–µ–∑ –∏–≥—Ä—ã\n"
                                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–µ–ª–∫–∏\n"
                                "‚Ä¢ –£—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ\n\n"
                                "üí∞ 99‚ÇΩ –≤ –º–µ—Å—è—Ü = –≤—Å–µ–≥–æ 3‚ÇΩ –≤ –¥–µ–Ω—å\n"
                                "‚òï –ú–µ–Ω—å—à–µ —á–µ–º —á–∞—à–∫–∞ –∫–æ—Ñ–µ!\n\n"
                                "üî• –°–∫–∏–¥–∫–∞ 50-70% –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!\n\n"
                                "‚è∞ –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –º–æ–º–µ–Ω—Ç - –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤!",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'day7_2hours')
                                logging.info(f"Sent day7_2hours message to user {user_id}")
                
                except Exception as e:
                    logging.error(f"Error sending funnel message to {user_id}: {e}")
            
            # ========== –û–ë–†–ê–ë–û–¢–ö–ê –ò–°–¢–ï–ö–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
            expired_users = get_expired_trial_users()
            
            for user in expired_users:
                user_id = user['user_id']
                subscription_until = user['subscription_until']
                hours_since_expired = (datetime.now() - subscription_until).total_seconds() / 3600
                
                try:
                    # ========== –°–†–ê–ó–£ –ü–û–°–õ–ï –ò–°–¢–ï–ß–ï–ù–ò–Ø (0-2 —á–∞—Å–∞) ==========
                    if 0 <= hours_since_expired < 2:
                        if not get_funnel_message_sent(user_id, 'expired_immediate'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üí≥ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–ª—É–±", callback_data="show_tariffs")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "üòî –í–∞—à –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫\n\n"
                                "–ù–∞–¥–µ–µ–º—Å—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤–∞–º –∏ –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É.\n\n"
                                "üéÅ –•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å:\n\n"
                                "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å–∫–∏–¥–∫—É –µ—â–µ –Ω–∞ 7 –¥–Ω–µ–π!\n\n"
                                "–í–µ—Ä–Ω—É—Ç—å—Å—è –º–æ–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n"
                                "‚Ä¢ 99‚ÇΩ –∑–∞ –º–µ—Å—è—Ü (–≤–º–µ—Å—Ç–æ 299‚ÇΩ)\n"
                                "‚Ä¢ 249‚ÇΩ –∑–∞ 3 –º–µ—Å—è—Ü–∞ (–≤–º–µ—Å—Ç–æ 897‚ÇΩ) üî•\n"
                                "‚Ä¢ –ò–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤/–Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                                "üìä –ß—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                                "‚ùå 5000+ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
                                "‚ùå –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–æ–≤–∏–Ω–∫–∏\n"
                                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–≤–µ—Ç—ã\n\n"
                                "P.S. –°–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π, –ø–æ—Ç–æ–º —Ü–µ–Ω—ã –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –æ–±—ã—á–Ω—ã–º.",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'expired_immediate')
                                logging.info(f"Sent expired_immediate message to user {user_id}")
                    
                    # ========== –î–ï–ù–¨ 2 –ü–û–°–õ–ï –ò–°–¢–ï–ß–ï–ù–ò–Ø (46-50 —á–∞—Å–æ–≤) ==========
                    if 46 <= hours_since_expired < 50:
                        if not get_funnel_message_sent(user_id, 'expired_day2'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="show_tariffs")],
                                [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/razvitie_dety")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "üí¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏:\n\n"
                                "\"–í–µ—Ä–Ω—É–ª–∏—Å—å –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∏ –Ω–µ –∂–∞–ª–µ–µ–º! –†–µ–±–µ–Ω–æ–∫ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\" - –ï–ª–µ–Ω–∞\n\n"
                                "\"–ó–∞ –º–µ—Å—è—Ü —Å—ã–Ω –Ω–∞—É—á–∏–ª—Å—è —Å—á–∏—Ç–∞—Ç—å –¥–æ 20 –∏ –≤—ã—É—á–∏–ª –≤—Å–µ –±—É–∫–≤—ã!\" - –ú–∞—Ä–∏—è\n\n"
                                "\"–ü–æ–∂–∞–ª–µ–ª–∞ —á—Ç–æ –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∞ —Å—Ä–∞–∑—É, –ø—Ä–∏—à–ª–æ—Å—å –ø–ª–∞—Ç–∏—Ç—å –ø–æ –ø–æ–ª–Ω–æ–π —Ü–µ–Ω–µ üòî\" - –û–ª—å–≥–∞\n\n"
                                "–ê –≤—ã –≤—Å–µ –µ—â–µ –¥—É–º–∞–µ—Ç–µ? ü§î\n\n"
                                "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã!\n\n"
                                "üí° –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã:\n"
                                "‚Ä¢ 87% —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç –ø–æ–¥–ø–∏—Å–∫—É\n"
                                "‚Ä¢ –†–æ–¥–∏—Ç–µ–ª–∏ —ç–∫–æ–Ω–æ–º—è—Ç 2-3 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é –Ω–∞ –ø–æ–∏—Å–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
                                "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +10 –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n\n"
                                "üéØ 3 –º–µ—Å—è—Ü–∞ = –≤—Å–µ–≥–æ 2.7‚ÇΩ –≤ –¥–µ–Ω—å!\n\n"
                                "‚ùì –ù–µ —É–≤–µ—Ä–µ–Ω—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º - —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ!",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'expired_day2')
                                logging.info(f"Sent expired_day2 message to user {user_id}")
                    
                    # ========== –î–ï–ù–¨ 5 –ü–û–°–õ–ï –ò–°–¢–ï–ß–ï–ù–ò–Ø (118-122 —á–∞—Å–∞) ==========
                    if 118 <= hours_since_expired < 122:
                        if not get_funnel_message_sent(user_id, 'expired_day5'):
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ üí∞", callback_data="feedback_expensive")],
                                [InlineKeyboardButton(text="–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="feedback_content")],
                                [InlineKeyboardButton(text="–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞", callback_data="feedback_time")],
                                [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="feedback_other")]
                            ])
                            success = await send_safe_funnel_message(
                                user_id,
                                "–ú–æ–∂–µ–º —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ? ü§î\n\n"
                                "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n\n"
                                "–ß—Ç–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ?\n\n"
                                "üí° –ó–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å:\n"
                                "–°–∫–∏–¥–∫–∞ 30% –Ω–∞ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ!\n\n"
                                "P.S. –ù–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üíö",
                                reply_markup=keyboard
                            )
                            if success:
                                mark_funnel_message_sent(user_id, 'expired_day5')
                                logging.info(f"Sent expired_day5 message to user {user_id}")
                
                except Exception as e:
                    logging.error(f"Error sending expired funnel message to {user_id}: {e}")
            
        except Exception as e:
            logging.error(f"Error in sales funnel: {e}")
            await asyncio.sleep(1800)

async def expired_users_funnel():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ò–°–¢–ï–ö–®–ò–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (day2, day5)"""
    logging.info("–ó–∞–ø—É—â–µ–Ω–∞ –≤–æ—Ä–æ–Ω–∫–∞ –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    while True:
        try:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            
            expired_users = get_expired_users_for_funnel()
            
            for user in expired_users:
                user_id = user['user_id']
                subscription_until = user['subscription_until']
                
                # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                hours_since_expired = (datetime.now() - subscription_until).total_seconds() / 3600
                
                # ========== –î–ï–ù–¨ 2 –ü–û–°–õ–ï –ò–°–¢–ï–ß–ï–ù–ò–Ø (46-50 —á–∞—Å–æ–≤) ==========
                if 46 <= hours_since_expired < 50:
                    if not get_funnel_message_sent(user_id, 'expired_day2'):
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="show_tariffs")],
                            [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/razvitie_dety")]
                        ])
                        
                        success = await send_safe_funnel_message(
                            user_id,
                            "üí¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
                            "\"–í–µ—Ä–Ω—É–ª–∏—Å—å –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∏ –Ω–µ –∂–∞–ª–µ–µ–º! –†–µ–±–µ–Ω–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∂–¥–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\" - –ï–ª–µ–Ω–∞, 2 –¥–µ—Ç–µ–π\n\n"
                            "\"–ó–∞ –º–µ—Å—è—Ü –¥–æ—á–∫–∞ –Ω–∞—É—á–∏–ª–∞—Å—å —Å—á–∏—Ç–∞—Ç—å –¥–æ 50 –∏ –≤—ã—É—á–∏–ª–∞ –≤–µ—Å—å –∞–ª—Ñ–∞–≤–∏—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–≤–∑–æ—à–µ–ª –æ–∂–∏–¥–∞–Ω–∏—è!\" - –ú–∞—Ä–∏—è\n\n"
                            "\"–ü–æ–∂–∞–ª–µ–ª–∞ —á—Ç–æ —Å—Ä–∞–∑—É –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∞ - –ø–æ—Ç–æ–º –ø—Ä–∏—à–ª–æ—Å—å –ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É üòî\" - –û–ª—å–≥–∞\n\n"
                            "ü§î –ê –≤—ã –≤—Å–µ –µ—â–µ –¥—É–º–∞–µ—Ç–µ?\n\n"
                            "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π —Å–æ —Å–∫–∏–¥–∫–æ–π 50-70%!\n\n"
                            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º–∞ –∑–∞ —Å–µ–±—è:\n"
                            "‚úÖ 87% —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç –ø–æ–¥–ø–∏—Å–∫—É\n"
                            "‚úÖ –≠–∫–æ–Ω–æ–º–∏—è 2-3 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é –Ω–∞ –ø–æ–∏—Å–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
                            "‚úÖ –í —Å—Ä–µ–¥–Ω–µ–º +10 –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n\n"
                            "üí∞ –í—Å–µ–≥–æ 2.7‚ÇΩ –≤ –¥–µ–Ω—å = —Ç–∞—Ä–∏—Ñ –Ω–∞ 3 –º–µ—Å—è—Ü–∞\n"
                            "–≠—Ç–æ –¥–µ—à–µ–≤–ª–µ –æ–¥–Ω–æ–π —à–æ–∫–æ–ª–∞–¥–∫–∏!\n\n"
                            "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û—Ç–≤–µ—Ç–∏–º –∑–∞ 5 –º–∏–Ω—É—Ç!",
                            reply_markup=keyboard
                        )
                        
                        if success:
                            mark_funnel_message_sent(user_id, 'expired_day2')
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ expired_day2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # ========== –î–ï–ù–¨ 5 –ü–û–°–õ–ï –ò–°–¢–ï–ß–ï–ù–ò–Ø (118-122 —á–∞—Å–∞) ==========
                if 118 <= hours_since_expired < 122:
                    if not get_funnel_message_sent(user_id, 'expired_day5'):
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí∞ –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ", callback_data="feedback_expensive")],
                            [InlineKeyboardButton(text="üìö –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="feedback_content")],
                            [InlineKeyboardButton(text="‚è∞ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏", callback_data="feedback_time")],
                            [InlineKeyboardButton(text="üí¨ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="feedback_other")]
                        ])
                        
                        success = await send_safe_funnel_message(
                            user_id,
                            "üôè –ù–∞–º –∂–∞–ª—å —á—Ç–æ –≤—ã –Ω–µ —Å –Ω–∞–º–∏...\n\n"
                            "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ—á–µ–º—É –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É?\n"
                            "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üíö\n\n"
                            "üéÅ –ó–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å:\n"
                            "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 30% –Ω–∞ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ!\n\n"
                            "üì© –ê –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –º—ã –º–æ–∂–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n"
                            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º - –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
                            reply_markup=keyboard
                        )
                        
                        if success:
                            mark_funnel_message_sent(user_id, 'expired_day5')
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ expired_day5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ expired_users_funnel: {e}")
            await asyncio.sleep(3600)

async def check_and_remove_expired():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    while True:
        try:
            logging.info("Checking for expired subscriptions...")
            expired_users = get_expired_users()
            
            for user in expired_users:
                user_id = user['user_id']
                username = user['username']
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞
                if user_id == ADMIN_ID:
                    logging.info(f"Skipping admin {user_id}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –ª–∏ –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                if was_notified_recently(user_id):
                    logging.info(f"User {user_id} was already notified recently, skipping...")
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
                    try:
                        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        if chat_member.status in ['creator', 'administrator']:
                            logging.info(f"User {user_id} is admin/owner, skipping removal")
                            continue
                    except Exception as e:
                        logging.warning(f"Could not get chat member info for {user_id}: {e}")
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
                    await bot.ban_chat_member(CHANNEL_ID, user_id)
                    # –°—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á—Ç–æ–±—ã –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
                    await bot.unban_chat_member(CHANNEL_ID, user_id)
                    
                    logging.info(f"Removed expired user: {username} (ID: {user_id})")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(
                            user_id,
                            "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\n"
                            "–ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.",
                            reply_markup=get_main_menu()
                        )
                        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–∏–ª–∏
                        mark_as_notified(user_id)
                        logging.info(f"Notified user {user_id} about expiration")
                    except Exception as e:
                        logging.error(f"Could not notify user {user_id}: {e}")
                    
                except Exception as e:
                    logging.error(f"Error removing user {user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å, –Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
            await asyncio.sleep(3600)
            
        except Exception as e:
            logging.error(f"Error in check_and_remove_expired: {e}")
            await asyncio.sleep(3600)

# –ÆKassa API
async def create_yookassa_payment(amount, description, user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    url = "https://api.yookassa.ru/v3/payments"
    
    idempotence_key = str(uuid.uuid4())
    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}"
    auth_bytes = auth_string.encode('utf-8')
    auth_b64 = base64.b64encode(auth_bytes).decode('utf-8')
    
    headers = {
        "Idempotence-Key": idempotence_key,
        "Content-Type": "application/json",
        "Authorization": f"Basic {auth_b64}"
    }
    
    data = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{(await bot.get_me()).username}"
        },
        "capture": True,
        "description": description,
        "metadata": {
            "user_id": str(user_id)
        }
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                return result
            else:
                logging.error(f"YooKassa error: {response.status}, {await response.text()}")
                return None

async def check_yookassa_payment(payment_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"
    
    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}"
    auth_bytes = auth_string.encode('utf-8')
    auth_b64 = base64.b64encode(auth_bytes).decode('utf-8')
    
    headers = {
        "Authorization": f"Basic {auth_b64}"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                return result
            else:
                logging.error(f"YooKassa check error: {response.status}")
                return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (7 –¥–Ω–µ–π)", callback_data="trial")],
        [InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_tariffs")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ])
    return keyboard

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_tariffs_menu() –¥–ª—è bot.py

def get_tariffs_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"1Ô∏è‚É£ 1 –º–µ—Å—è—Ü - {TARIFFS['1month']['price']}‚ÇΩ (–≤–º–µ—Å—Ç–æ {TARIFFS['1month']['old_price']}‚ÇΩ)",
            callback_data="1month"
        )],
        [InlineKeyboardButton(
            text=f"üî• 3 –º–µ—Å—è—Ü–∞ - {TARIFFS['3months']['price']}‚ÇΩ (–ü–û–ü–£–õ–Ø–†–ù–´–ô!) üî•",  # üëà –í–´–î–ï–õ–ò–õ–ò
            callback_data="3months"
        )],
        [InlineKeyboardButton(
            text=f"6Ô∏è‚É£ 6 –º–µ—Å—è—Ü–µ–≤ - {TARIFFS['6months']['price']}‚ÇΩ (–≤–º–µ—Å—Ç–æ {TARIFFS['6months']['old_price']}‚ÇΩ)",
            callback_data="6months"
        )],
        [InlineKeyboardButton(
            text=f"‚ôæÔ∏è –ù–ê–í–°–ï–ì–î–ê - {TARIFFS['forever']['price']}‚ÇΩ üíé –õ–£–ß–®–ê–Ø –¶–ï–ù–ê",
            callback_data="forever"
        )],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = get_user(user_id)
    
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã —Å —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π!\n\n"
            "üéÅ –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 –¥–Ω–µ–π! –ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ üëá",
            reply_markup=get_main_menu()
        )
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if is_subscription_active(user_id):
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\n"
                "–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! üéâ",
                reply_markup=get_main_menu()
            )
        else:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ üòî\n\n"
                "–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏!",
                reply_markup=get_main_menu()
            )

@dp.callback_query(F.data == "trial")
async def process_trial(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'"""
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—Ä–∞–ª –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    user = get_user(user_id)
    
    if user:
        await callback.answer(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥! üòä",
            show_alert=True
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    add_user(user_id, username, TARIFFS['trial']['days'], 'trial')
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
        invite_link = await bot.create_chat_invite_link(
            CHANNEL_ID,
            member_limit=1,
            expire_date=datetime.now() + timedelta(days=TARIFFS['trial']['days'])
        )
        
        await callback.message.edit_text(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"–í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {TARIFFS['trial']['days']} –¥–Ω–µ–π!\n\n"
            f"<b>–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É!</b>\n\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {invite_link.invite_link}\n\n"
            f"‚è∞ –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {TARIFFS['trial']['days']} –¥–Ω–µ–π.\n"
            f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ!\n\n"
            f"üí° –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ.",
        )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error adding user to channel: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
    
    await callback.answer()

# –ò –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∞—Ä–∏—Ñ–æ–≤:
@dp.callback_query(F.data == "show_tariffs")
async def show_tariffs(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    await callback.message.edit_text(
        "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–ø–∏—Å–∫—É:**\n\n"
        "üéÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –ë–ï–°–ü–õ–ê–¢–ù–û, –ø–æ—Ç–æ–º:\n\n"
        "üí∞ 1 –º–µ—Å—è—Ü - 99‚ÇΩ\n"
        "üî• 3 –º–µ—Å—è—Ü–∞ - 249‚ÇΩ (—Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π!)\n"
        "üíé 6 –º–µ—Å—è—Ü–µ–≤ - 399‚ÇΩ\n"
        "‚ôæÔ∏è –ù–∞–≤—Å–µ–≥–¥–∞ - 599‚ÇΩ (—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂)\n\n"
        "‚ö°Ô∏è –¶–µ–Ω—ã –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å!",
        reply_markup=get_tariffs_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data.in_(['1month', '3months', '6months', 'forever']))
async def process_tariff(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tariff_code = callback.data
    tariff = TARIFFS[tariff_code]
    
    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...", show_alert=False)
    
    payment = await create_yookassa_payment(
        amount=tariff['price'],
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞: {tariff['name']}",
        user_id=user_id
    )
    
    if not payment:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        return
    
    create_payment(user_id, tariff['price'], tariff_code, payment['id'])
    confirmation_url = payment['confirmation']['confirmation_url']
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment['id']}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    await callback.message.edit_text(
        f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: **{tariff['name']}**\n"
        f"üí∞ –ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {tariff['old_price']}‚ÇΩ\n"
        f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: **{tariff['price']}‚ÇΩ**\n\n"
        f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å'\n"
        f"2Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n"
        f"3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
        f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("check_"))
async def check_payment(callback: types.CallbackQuery):
    yookassa_payment_id = callback.data.replace("check_", "")
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...", show_alert=False)
    
    payment_info = await check_yookassa_payment(yookassa_payment_id)
    
    if not payment_info:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    
    status = payment_info.get('status')
    
    if status == 'succeeded':
        payment = get_payment_by_yookassa_id(yookassa_payment_id)
        if payment:
            user_id = payment['user_id']
            tariff_code = payment['tariff']
            tariff = TARIFFS[tariff_code]
            username = callback.from_user.username or "unknown"
            
            update_payment_status(yookassa_payment_id, 'completed')
            add_user(user_id, username, tariff['days'], tariff_code)
            
            try:
                if tariff_code == 'forever':
                    invite_link = await bot.create_chat_invite_link(
                        CHANNEL_ID,
                        member_limit=1
                    )
                else:
                    invite_link = await bot.create_chat_invite_link(
                        CHANNEL_ID,
                        member_limit=1,
                        expire_date=datetime.now() + timedelta(days=tariff['days'])
                    )
                
                await callback.message.edit_text(
                    f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø.\n"
                    f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n\n"
                    f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É: {invite_link.invite_link}",
                    reply_markup=get_main_menu(),
                    parse_mode="Markdown"
                )
                
                if ADMIN_ID:
                    await bot.send_message(
                        ADMIN_ID,
                        f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
                        f"üë§ User: @{username} (ID: {user_id})\n"
                        f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
                        f"üíµ –°—É–º–º–∞: {tariff['price']}‚ÇΩ"
                    )
                
            except Exception as e:
                logging.error(f"Error creating invite: {e}")
                await callback.message.edit_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=get_main_menu()
                )
        
    elif status == 'pending':
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            show_alert=True
        )
    else:
        await callback.answer(
            f"‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )

@dp.callback_query(F.data == "status")
async def check_status(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            show_alert=True
        )
        return
    
    subscription_until = user['subscription_until']
    is_active = datetime.now() < subscription_until
    
    if is_active:
        days_left = (subscription_until - datetime.now()).days
        tariff_info = TARIFFS.get(user['tariff'], {})
        
        if user['tariff'] == 'forever':
            status_text = (
                f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!**\n\n"
                f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚ôæÔ∏è –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
            )
        else:
            status_text = (
                f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!**\n\n"
                f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                f"üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_until.strftime('%d.%m.%Y')}"
            )
    else:
        status_text = (
            f"‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º!"
        )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã —Å —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π!\n\n"
        "üéÅ –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 –¥–Ω–µ–π! –ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ üëá",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "show_tariffs")
async def show_tariffs(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    await callback.message.edit_text(
        "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–ø–∏—Å–∫—É:**\n\n"
        "üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã 5 –¥–Ω–µ–π!\n"
        "–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ ‚Üí –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π\n\n"
        "üí° –ß–µ–º –¥–æ–ª—å—à–µ —Ç–∞—Ä–∏—Ñ - —Ç–µ–º –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏—è!",
        reply_markup=get_tariffs_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "faq")
async def show_faq(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", callback_data="faq_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞?", callback_data="faq_2")],
        [InlineKeyboardButton(text="3Ô∏è‚É£ –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏?", callback_data="faq_3")],
        [InlineKeyboardButton(text="4Ô∏è‚É£ –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?", callback_data="faq_4")],
        [InlineKeyboardButton(text="5Ô∏è‚É£ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É?", callback_data="faq_5")],
        [InlineKeyboardButton(text="6Ô∏è‚É£ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ?", callback_data="faq_6")],
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/razvitie_dety")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    await callback.message.edit_text(
        "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "faq_1")
async def faq_answer_1(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://t.me/instrukcii_baza/33")],
        [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="show_tariffs")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq")]
    ])
    
    await callback.message.edit_text(
        "**1. –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?**\n\n"
        "üé• **–°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é** - —Ç–∞–º –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ!\n\n"
        "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å.\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ /start\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ó–∞ 3-7 –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "faq_2")
async def faq_answer_2(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back")],
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/razvitie_dety")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq")]
    ])
    
    await callback.message.edit_text(
        "**2. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞?**\n\n"
        "–û–ø–ª–∞—Ç–∞ –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:\n\n"
        "üí≥ **–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π:**\n"
        "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞\n"
        "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º\n\n"
        "üè¶ **–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–Ω–∫–æ–º:**\n"
        "‚Ä¢ –ë–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
        "‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–∏\n"
        "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SMS\n\n"
        "**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã\n"
        "2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞\n"
        "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É\n"
        "4. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –±–∞–Ω–∫–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∏–ª–∞—Å—å - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @razvitie_dety",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "faq_3")
async def faq_answer_3(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq")]
    ])
    
    await callback.message.edit_text(
        "**3. –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏?**\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å'**\n\n"
        "–í—ã —É–≤–∏–¥–∏—Ç–µ:\n"
        "‚Ä¢ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ\n"
        "‚Ä¢ –î–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π\n\n"
        "üì± –¢–∞–∫–∂–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "faq_4")
async def faq_answer_4(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 4"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/razvitie_dety")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq")]
    ])
    
    # –£–±–∏—Ä–∞–µ–º parse_mode –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
    await callback.message.edit_text(
        "4. –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?\n\n"
        "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –Ω–∞ 7 –¥–Ω–µ–π, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π!\n\n"
        "üí∞ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤:\n"
        "–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏:\n"
        "‚Ä¢ –í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
        "‚Ä¢ –í–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @razvitie_dety\n\n"
        "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
        "–ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö.",
        reply_markup=keyboard
        # –£–î–ê–õ–ò–¢–ï parse_mode="Markdown" –æ—Ç—Å—é–¥–∞!
    )
    await callback.answer()

@dp.callback_query(F.data == "faq_5")
async def faq_answer_5(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 5"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ: –û–±–∑–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", url="https://t.me/instrukcii_baza/32")],
        [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", url="https://t.me/instrukcii_baza/34")],
        [InlineKeyboardButton(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq")]
    ])
    
    await callback.message.edit_text(
        "**5. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É?**\n\n"
        "üé• **–°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã** - –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –≤–Ω—É—Ç—Ä–∏!\n\n"
        "üìö **–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:**\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º\n"
        "‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n"
        "‚Ä¢ –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n\n"
        "üë• **–ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞:**\n"
        "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n\n"
        "üéÅ **–ë–æ–Ω—É—Å—ã:**\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "‚Ä¢ –†–∞–Ω–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–∏–Ω–æ–∫\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏\n\n"
        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 –¥–Ω–µ–π, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "faq_6")
async def faq_answer_6(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 6"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="back")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq")]
    ])
    
    await callback.message.edit_text(
        "**6. –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ?**\n\n"
        "üìà **–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:**\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª–∏—Ç—Å—è —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π\n\n"
        "üìâ **–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:**\n"
        "‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ\n\n"
        "‚ôæÔ∏è **–¢–∞—Ä–∏—Ñ '–ù–∞–≤—Å–µ–≥–¥–∞':**\n"
        "‚Ä¢ –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ –°–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∞ 80%!\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤—ã–≥–æ–¥–Ω–µ–µ - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 80%!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /faq
@dp.message(Command("faq"))
async def cmd_faq(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ FAQ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", callback_data="faq_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞?", callback_data="faq_2")],
        [InlineKeyboardButton(text="3Ô∏è‚É£ –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏?", callback_data="faq_3")],
        [InlineKeyboardButton(text="4Ô∏è‚É£ –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?", callback_data="faq_4")],
        [InlineKeyboardButton(text="5Ô∏è‚É£ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É?", callback_data="faq_5")],
        [InlineKeyboardButton(text="6Ô∏è‚É£ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ?", callback_data="faq_6")],
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/razvitie_dety")]
    ])
    
    await message.answer(
        "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.message(Command("stats"))
async def admin_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('SELECT COUNT(*) as count FROM users')
    total_users = cur.fetchone()['count']
    
    cur.execute('SELECT COUNT(*) as count FROM users WHERE subscription_until > %s', 
                (datetime.now(),))
    active_users = cur.fetchone()['count']
    
    cur.execute('SELECT COALESCE(SUM(amount), 0) as total FROM payments WHERE status = %s',
                ('completed',))
    total_revenue = cur.fetchone()['total']
    
    cur.execute('SELECT COUNT(*) as count FROM payments WHERE status = %s', ('pending',))
    pending_payments = cur.fetchone()['count']
    
    cur.close()
    conn.close()
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue}‚ÇΩ
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {pending_payments}
"""
    
    await message.answer(stats_text, parse_mode="Markdown")

@dp.message(Command("cleardb"))
async def admin_clear_db(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")]
    ])
    
    await message.answer(
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç:\n"
        "‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏\n"
        "‚Ä¢ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "**–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "confirm_clear")
async def confirm_clear_db(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        tables_cleared = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å notifications
        try:
            cur.execute('DELETE FROM notifications')
            tables_cleared.append('notifications')
        except Exception as e:
            logging.warning(f"Table notifications doesn't exist or error: {e}")
        
        # –û—á–∏—â–∞–µ–º payments
        try:
            cur.execute('DELETE FROM payments')
            tables_cleared.append('payments')
        except Exception as e:
            logging.warning(f"Error clearing payments: {e}")
        
        # –û—á–∏—â–∞–µ–º users
        try:
            cur.execute('DELETE FROM users')
            tables_cleared.append('users')
        except Exception as e:
            logging.warning(f"Error clearing users: {e}")
        
        conn.commit()
        cur.close()
        conn.close()
        
        await callback.message.edit_text(
            "‚úÖ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!**\n\n"
            f"–û—á–∏—â–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables_cleared)}\n\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ! üöÄ"
        )
        
        logging.info(f"Database cleared by admin {callback.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error clearing database: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!**\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )
    
    await callback.answer()

@dp.callback_query(F.data == "cancel_clear")
async def cancel_clear_db(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    await callback.message.edit_text("‚úÖ –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø—Ä–æ—Å–∞ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
@dp.callback_query(F.data.in_(['survey_games', 'survey_creative', 'survey_learning']))
async def handle_survey(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! üíö", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ feedback
@dp.callback_query(F.data.in_(['feedback_expensive', 'feedback_content', 'feedback_time', 'feedback_other']))
async def handle_feedback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôè", show_alert=True)

@dp.callback_query(F.data == "how_it_works")
async def how_it_works(callback: types.CallbackQuery):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    await callback.message.edit_text(
        "üìñ <b>–ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢?</b>\n\n"
        "<b>–®–∞–≥ 1:</b> –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\" –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.\n\n"
        "<b>–®–∞–≥ 2:</b> –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.\n\n"
        "<b>–®–∞–≥ 3:</b> –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è\n"
        "–í –≥—Ä—É–ø–ø–µ –≤—ã –Ω–∞–π–¥—ë—Ç–µ:\n"
        "‚Ä¢ üìö –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ üìñ –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "‚Ä¢ üéØ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
        "<b>–®–∞–≥ 4:</b> –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "–ó–∞ 7 –¥–Ω–µ–π –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±–µ–Ω–∫–∞ –∏ –ø–æ–π–º—ë—Ç–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º –Ω–∞—à –∫–ª—É–±.\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π 7 –¥–Ω–µ–π\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–æ–π –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        "üéÅ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if ADMIN_ID:
        feedback_names = {
            'expensive': '–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ',
            'content': '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç',
            'time': '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏',
            'other': '–î—Ä—É–≥–æ–µ'
        }
        feedback = callback.data.replace('feedback_', '')
        await bot.send_message(
            ADMIN_ID,
            f"üìä –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n"
            f"üë§ @{callback.from_user.username} (ID: {callback.from_user.id})\n"
            f"üí≠ {feedback_names.get(feedback, feedback)}"
        )

# –ö–û–ú–ê–ù–î–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# –î–æ–±–∞–≤–∏—Ç—å –≤ bot.py –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /stats

# –ü–†–û–°–¢–ê–Ø –ö–û–ú–ê–ù–î–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò (–∑–∞–º–µ–Ω–∏—Ç—å admin_check_db –≤ bot.py)

@dp.message(Command("checkdb"))
async def admin_check_db(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è"""
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        # 1. –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cur.execute('SELECT COUNT(*) as total FROM users')
        total = cur.fetchone()['total']
        
        cur.execute('SELECT COUNT(DISTINCT user_id) as unique_users FROM users')
        unique = cur.fetchone()['unique_users']
        
        # 2. –î—É–±–ª–∏
        cur.execute('''
            SELECT user_id, username, COUNT(*) as count
            FROM users
            GROUP BY user_id, username
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 10
        ''')
        dupes = cur.fetchall()
        
        # 3. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
        cur.execute('''
            SELECT 
                DATE_TRUNC('hour', created_at) as hour,
                COUNT(*) as count
            FROM users
            WHERE created_at >= NOW() - INTERVAL '12 hours'
            GROUP BY hour
            ORDER BY hour DESC
            LIMIT 12
        ''')
        hourly = cur.fetchall()
        
        # 4. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–∞—Å–æ–≤
        cur.execute('''
            SELECT COUNT(*) as count
            FROM users
            WHERE created_at >= NOW() - INTERVAL '5 hours'
        ''')
        last_5h = cur.fetchone()['count']
        
        # 5. –ê–∫—Ç–∏–≤–Ω—ã—Ö VS –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        cur.execute('''
            SELECT 
                COUNT(*) FILTER (WHERE subscription_until > NOW()) as active,
                COUNT(*) FILTER (WHERE subscription_until <= NOW()) as expired,
                COUNT(*) FILTER (WHERE tariff = 'trial') as trial,
                COUNT(*) FILTER (WHERE tariff != 'trial') as paid
            FROM users
        ''')
        subs = cur.fetchone()
        
        # 6. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ë–î
        cur.execute('SELECT NOW() as db_time')
        db_time = cur.fetchone()['db_time']
        
        cur.close()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üîç **–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê**\n\n"
        
        # –ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤–Ω–æ–µ
        report += "üìä **–ó–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ:**\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
        report += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö user_id: {unique}\n"
        
        if total != unique:
            report += f"‚Ä¢ ‚ö†Ô∏è –î—É–±–ª–µ–π: {total - unique}\n\n"
        else:
            report += f"‚Ä¢ ‚úÖ –î—É–±–ª–µ–π –Ω–µ—Ç\n\n"
        
        # –ë–ª–æ–∫ 2: –î—É–±–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if dupes:
            report += "‚ö†Ô∏è **–ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´:**\n"
            for d in dupes[:5]:
                username = d['username'] or '–±–µ–∑ username'
                report += f"‚Ä¢ @{username} (ID: {d['user_id']}): {d['count']} –∑–∞–ø–∏—Å–µ–π\n"
            report += "\n"
        
        # –ë–ª–æ–∫ 3: –ü–æ–¥–ø–∏—Å–∫–∏
        report += "üíé **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫:**\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {subs['active']}\n"
        report += f"‚Ä¢ –ò—Å—Ç—ë–∫—à–∏–µ: {subs['expired']}\n"
        report += f"‚Ä¢ Trial: {subs['trial']}\n"
        report += f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ: {subs['paid']}\n\n"
        
        # –ë–ª–æ–∫ 4: –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
        report += f"‚è∞ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–∞—Å–æ–≤:** {last_5h} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n"
        
        report += "üìà **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —á–∞—Å–∞–º (UTC):**\n"
        for h in hourly[:8]:
            hour_str = h['hour'].strftime('%d.%m %H:00')
            report += f"‚Ä¢ {hour_str}: {h['count']} —á–µ–ª\n"
        
        report += f"\nüïê **–í—Ä–µ–º—è –ë–î:** {db_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
        
        # –í—ã–≤–æ–¥
        report += "\nüí° **–í—ã–≤–æ–¥:**\n"
        
        if total != unique:
            report += "‚ö†Ô∏è –í –±–∞–∑–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π!\n"
            report += "–ü—Ä–∏—á–∏–Ω–∞: —Ñ—É–Ω–∫—Ü–∏—è add_user() –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏\n"
        elif last_5h < 50:
            report += f"‚ö†Ô∏è –ó–∞ 5—á –≤—Å–µ–≥–æ {last_5h} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n"
            report += "–≠—Ç–æ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ (~100)\n"
        else:
            report += "‚úÖ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ë–∞–∑–∞ –≤ –Ω–æ—Ä–º–µ!\n"
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è
        activation_rate = round(100 * subs['active'] / total, 1) if total > 0 else 0
        report += f"\nüìä **–ê–∫—Ç–∏–≤–∞—Ü–∏—è:** {activation_rate}%\n"
        
        if activation_rate < 70:
            report += "üí° –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!"
        
        await message.answer(report)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n{str(e)}")
        import traceback
        logging.error(f"Checkdb error: {e}\n{traceback.format_exc()}")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø send_welcome_messages()
# –ó–∞–º–µ–Ω–∏—Ç—å –≤ bot.py —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ —ç—Ç—É

async def send_welcome_messages():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    logging.info("Welcome messages task started!")
    
    while True:
        try:
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn = get_db_connection()
            cur = conn.cursor()
            
            cur.execute("""
                SELECT u.user_id, u.username
                FROM users u
                LEFT JOIN welcome_messages wm ON u.user_id = wm.user_id
                WHERE u.created_at >= NOW() - INTERVAL '10 minutes'
                  AND u.created_at <= NOW() - INTERVAL '5 minutes'
                  AND wm.user_id IS NULL
                  AND u.tariff = 'trial'
                  AND u.subscription_until > NOW()
            """)
            
            users = cur.fetchall()
            cur.close()
            conn.close()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
            for user in users:
                user_id = user['user_id']
                
                try:
                    # –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial")],
                        [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://t.me/instrukcii_baza/35")],
                        [InlineKeyboardButton(text="üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="how_it_works")],
                        [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
                    ])
                    
                    await bot.send_message(
                        user_id,
                        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                        "–Ø –≤–∏–∂—É –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º!\n\n"
                        "üéØ <b>–í–æ—Ç —á—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:</b>\n\n"
                        "üéÅ <b>7 –¥–Ω–µ–π –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –¥–æ—Å—Ç—É–ø–∞</b> –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
                        "üìö <b>5000+ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b> –¥–ª—è –¥–µ—Ç–µ–π\n"
                        "üé® –ò–≥—Ä—ã, –∑–∞–¥–∞–Ω–∏—è, –ø–æ–¥–µ–ª–∫–∏, –æ–±—É—á–µ–Ω–∏–µ\n"
                        "‚ö°Ô∏è –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n\n"
                        "üí° <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b>\n\n"
                        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\"\n"
                        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É\n"
                        "3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å —Ä–µ–±–µ–Ω–∫–æ–º –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è!\n\n"
                        "‚è∞ –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 30 —Å–µ–∫—É–Ω–¥!\n\n"
                        "üëá –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                    
                    # –û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏)
                    conn2 = get_db_connection()
                    cur2 = conn2.cursor()
                    cur2.execute("""
                        INSERT INTO welcome_messages (user_id, sent_at)
                        VALUES (%s, NOW())
                        ON CONFLICT (user_id) DO NOTHING
                    """, (user_id,))
                    conn2.commit()
                    cur2.close()
                    conn2.close()
                    
                    logging.info(f"Welcome message sent to user {user_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logging.error(f"Error sending welcome to {user_id}: {e}")
            
        except Exception as e:
            logging.error(f"Error in send_welcome_messages: {e}")
            await asyncio.sleep(60)

async def main():
    init_db()
    feedback_broadcast.init_feedback_system(dp, bot, ADMIN_ID, get_db_connection)
    logging.info("Bot started successfully!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¢–†–ò —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(check_and_remove_expired())
    asyncio.create_task(sales_funnel())  # –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    asyncio.create_task(expired_users_funnel())  # üëà –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö
    asyncio.create_task(send_welcome_messages())
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
